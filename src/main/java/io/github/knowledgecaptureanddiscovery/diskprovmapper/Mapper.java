package io.github.knowledgecaptureanddiscovery.diskprovmapper;

import java.net.URISyntaxException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import edu.isi.kcap.diskproject.shared.classes.hypothesis.Hypothesis;
import edu.isi.kcap.diskproject.shared.classes.loi.LineOfInquiry;
import edu.isi.kcap.diskproject.shared.classes.loi.TriggeredLOI;
import edu.isi.kcap.diskproject.shared.classes.loi.WorkflowBindings;
import edu.isi.kcap.diskproject.shared.classes.question.Question;
import edu.isi.kcap.diskproject.shared.classes.question.QuestionVariable;
import edu.isi.kcap.diskproject.shared.classes.workflow.VariableBinding;

import org.openprovenance.prov.interop.InteropFramework;
import org.openprovenance.prov.model.ActedOnBehalfOf;
import org.openprovenance.prov.model.Activity;
import org.openprovenance.prov.model.Agent;
import org.openprovenance.prov.model.Bundle;
import org.openprovenance.prov.model.Entity;
import org.openprovenance.prov.model.HadMember;
import org.openprovenance.prov.model.Namespace;
import org.openprovenance.prov.model.Other;
// import prov
import org.openprovenance.prov.model.ProvFactory;
import org.openprovenance.prov.model.QualifiedName;
import org.openprovenance.prov.model.Type;
import org.openprovenance.prov.model.Used;
import org.openprovenance.prov.model.WasDerivedFrom;
import org.openprovenance.prov.model.WasGeneratedBy;
import org.openprovenance.prov.model.WasInformedBy;

/**
 * @author Maximiliano Osorio
 *
 */
public class Mapper {
        /**
         * Most of these will be reused from the old code, because it works.
         * The mapper initializes the catalog and calls to the template exporter.
         */
        public DocumentProv prov = new DocumentProv(InteropFramework.getDefaultFactory());
        public ProvFactory pFactory = prov.factory;
        Bundle questionBundle = pFactory.newNamedBundle(prov.qn("questionBundle"), null);
        Bundle hypothesisBundle = pFactory.newNamedBundle(prov.qn("hypothesisBundle"), null);
        Bundle loisBundle = pFactory.newNamedBundle(prov.qn("loisBundle"), null);
        public DocumentProv doc;

        /**
         * Generate a DocumentProv object from a Hypothesis, LineOfInquiry, TriggeredLOI
         * and Questions
         *
         * @param hypothesis             The Hypothesis object
         * @param lineOfInquiry          The LineOfInquiry object
         * @param triggeredLineOfInquiry A list of TriggeredLOI objects
         * @param questions              A list of Question objects
         * @throws ParseException
         * @throws URISyntaxException A URISyntaxException is thrown if the URI is not
         *                            valid. The reaon for this is that the URI is
         *                            generated by the localName.
         */
        public Mapper(Hypothesis hypothesis, LineOfInquiry lineOfInquiry, TriggeredLOI triggeredLineOfInquiry,
                        List<Question> questions)
                        throws ParseException, URISyntaxException {
                List<TriggeredLOI> triggeredLinesOfInquiry = new ArrayList<TriggeredLOI>();
                triggeredLinesOfInquiry.add(triggeredLineOfInquiry);
                map(hypothesis, lineOfInquiry, triggeredLinesOfInquiry, questions);
                Namespace loisDefaultNamespace = new Namespace();
                DocumentProv.register(loisDefaultNamespace, DocumentProv.PROV_NEUROSCIENCE_LINE_NS);
                Namespace hypothesisDefaultNamespace = new Namespace();
                DocumentProv.register(hypothesisDefaultNamespace, DocumentProv.PROV_NEUROSCIENCE_HYPOTHESIS_NS);
                Namespace questionDefaultNamespace = new Namespace();
                DocumentProv.register(questionDefaultNamespace, DocumentProv.PROV_NEUROSCIENCE_QUESTION_NS);

                prov.document.setNamespace(prov.ns);
                questionBundle.setNamespace(questionDefaultNamespace);
                prov.document.getStatementOrBundle().add(questionBundle);
                hypothesisBundle.setNamespace(hypothesisDefaultNamespace);
                prov.document.getStatementOrBundle().add(hypothesisBundle);
                loisBundle.setNamespace(loisDefaultNamespace);
                prov.document.getStatementOrBundle().add(loisBundle);
                doc = prov;
        }

        /**
         * Generate a DocumentProv object from a Hypothesis, LineOfInquiry, TriggeredLOI
         * and Questions
         *
         * @param hypothesis              The Hypothesis object
         * @param lineOfInquiry           The LineOfInquiry object
         * @param triggeredLinesOfInquiry A list of TriggeredLOI objects
         * @param questions               A list of Question objects
         * @throws ParseException
         * @throws URISyntaxException A URISyntaxException is thrown if the URI is not
         *                            valid. The reaon for this is that the URI is
         *                            generated by the localName.
         */
        public Mapper(Hypothesis hypothesis, LineOfInquiry lineOfInquiry, List<TriggeredLOI> triggeredLinesOfInquiry,
                        List<Question> questions)
                        throws ParseException, URISyntaxException {
                map(hypothesis, lineOfInquiry, triggeredLinesOfInquiry, questions);
                Namespace loisDefaultNamespace = new Namespace();
                DocumentProv.register(loisDefaultNamespace, DocumentProv.PROV_NEUROSCIENCE_LINE_NS);
                Namespace hypothesisDefaultNamespace = new Namespace();
                DocumentProv.register(hypothesisDefaultNamespace, DocumentProv.PROV_NEUROSCIENCE_HYPOTHESIS_NS);
                Namespace questionDefaultNamespace = new Namespace();
                DocumentProv.register(questionDefaultNamespace, DocumentProv.PROV_NEUROSCIENCE_QUESTION_NS);

                prov.document.setNamespace(prov.ns);
                questionBundle.setNamespace(questionDefaultNamespace);
                prov.document.getStatementOrBundle().add(questionBundle);
                hypothesisBundle.setNamespace(hypothesisDefaultNamespace);
                prov.document.getStatementOrBundle().add(hypothesisBundle);
                loisBundle.setNamespace(loisDefaultNamespace);
                prov.document.getStatementOrBundle().add(loisBundle);
                doc = prov;
        }

        public Bundle createTriggerBundle(TriggeredLOI trigger) throws URISyntaxException {
                String triggerId = Utils.getFragment(trigger.getId());
                Bundle triggerBundle = pFactory.newNamedBundle(prov.qn(triggerId),
                                null);
                Namespace triggerDefaultNamespace = new Namespace();
                String triggerNamespace = DocumentProv.PROV_NEUROSCIENCE_TRIGGER_NS + triggerId + "/";
                DocumentProv.register(triggerDefaultNamespace, triggerNamespace);
                triggerBundle.setNamespace(triggerDefaultNamespace);
                prov.document.getStatementOrBundle().add(triggerBundle);
                return triggerBundle;
        }

        public void map(Hypothesis hypothesis, LineOfInquiry lineOfInquiry,
                        List<TriggeredLOI> triggeredLOIList, List<Question> questions)
                        throws ParseException, URISyntaxException {
                Agent hvargas = createDummyAgent("hvargas", "Hernan Vargas");
                Agent neda = createDummyAgent("neda", "Neda Jahanshad");
                prov.document.getStatementOrBundle().add(hvargas);
                prov.document.getStatementOrBundle().add(neda);

                // find the question by the hypothesis.questionId
                Question question = findQuestion(hypothesis.getQuestionId(), questions);
                if (question == null) {
                        throw new RuntimeException("Question not found for hypothesis: " + hypothesis.getId());
                }

                Entity questionEntity = createQuestionEntity(question);
                Entity hypothesisEntity = createHypothesisEntity(hypothesis);
                Entity lineOfInquiryEntity = createLineOfInquiryEntity(lineOfInquiry);

                Activity createQuestionActivity = linkActivityEntities(hvargas, neda, questionEntity, questionBundle,
                                Constants.ACTIVITY_CREATE_QUESTION_LOCALNAME, Constants.ACTIVITY_CREATE_QUESTION_LABEL,
                                Constants.ACTIVITY_CREATE_QUESTION_DESCRIPTION);
                Activity createHypothesisActivity = linkActivityEntities(hvargas, neda,
                                hypothesisEntity,
                                hypothesisBundle,
                                Constants.ACTIVITY_CREATE_HYPOTHESIS_LOCALNAME,
                                Constants.ACTIVITY_CREATE_HYPOTHESIS_LABEL,
                                Constants.ACTIVITY_CREATE_HYPOTHESIS_DESCRIPTION);

                Entity questionVariablesBinding = level2QuestionAddVariables(question, questionEntity, null,
                                createQuestionActivity);
                Entity hypothesisVariablesCollection = level2HypothesisAddVariables(hypothesis, hypothesisEntity,
                                questionVariablesBinding, createHypothesisActivity, question);

                localWasDerived(questionEntity, hypothesisEntity, questionBundle);
                localWasDerived(questionEntity, lineOfInquiryEntity, loisBundle);

                for (TriggeredLOI triggerLineInquiry : triggeredLOIList) {
                        Bundle triggerBundle = createTriggerBundle(triggerLineInquiry);
                        String id = DocumentProv.PROV_NEUROSCIENCE_TRIGGER_NS + triggerLineInquiry.getId();
                        String localName = Utils.getFragment(id);
                        prov.ns.register(localName, id);
                        Entity triggerEntity = createTiggerEntity(triggerLineInquiry, triggerBundle);
                        localWasDerived(lineOfInquiryEntity, triggerEntity, triggerBundle);
                        level2LineAdd(triggerLineInquiry, lineOfInquiry,
                                        hypothesisEntity, questionEntity,
                                        lineOfInquiryEntity,
                                        triggerEntity, hypothesisVariablesCollection, triggerBundle);
                }
        }

        private Entity addRunVariableBinding(Entity collection, VariableBinding variableBinding, Bundle triggerBundle) {
                String name = variableBinding.getVariable();
                String value = variableBinding.getBinding();
                String variableLocalName = collection.getId().getLocalPart() + '_'
                                + name;
                Entity variableBindingEntity = pFactory.newEntity(
                                prov.qn(variableLocalName, DocumentProv.PROV_NEUROSCIENCE_TRIGGER_PREFIX),
                                name);
                variableBindingEntity.setValue(pFactory.newValue(value));

                HadMember hm2 = pFactory.newHadMember(
                                collection.getId(),
                                variableBindingEntity.getId());

                triggerBundle.getStatement().add(variableBindingEntity);
                triggerBundle.getStatement().add(hm2);

                return variableBindingEntity;
        }

        private Entity addRunVariableBinding(Entity collection, VariableBinding variableBinding, String prefix,
                        Bundle triggerBundle) {
                String name = variableBinding.getVariable();
                String value = variableBinding.getBinding();
                String variableLocalName = collection.getId().getLocalPart() + '_'
                                + name;
                Entity variableBindingEntity = pFactory.newEntity(
                                prov.qn(variableLocalName, prefix),
                                name);
                variableBindingEntity.setValue(pFactory.newValue(value));

                HadMember hm2 = pFactory.newHadMember(
                                collection.getId(),
                                variableBindingEntity.getId());

                triggerBundle.getStatement().add(variableBindingEntity);
                triggerBundle.getStatement().add(hm2);
                return variableBindingEntity;
        }

        private void addVariableBindingWorkflow(Entity variablesBindingMetaWorkflowEntity,
                        Activity transformDataQuery, Bundle triggerBundle) {
                Used dataQueryUsedVariable = pFactory.newUsed(null, variablesBindingMetaWorkflowEntity.getId(),
                                transformDataQuery.getId(), null,
                                null);
                triggerBundle.getStatement().add(dataQueryUsedVariable);
        }

        private Activity linkActivityEntities(Agent delegate, Agent responsible, Entity generated, Bundle bundle,
                        String activityName, String activityLabel, String commentText) {
                Activity activity = pFactory.newActivity(prov.qn(activityName), activityLabel);
                WasGeneratedBy wasGeneratedBy = pFactory.newWasGeneratedBy(null, generated.getId(), activity.getId(),
                                null, null);
                ActedOnBehalfOf actedOnBehalfOf = pFactory.newActedOnBehalfOf(null, delegate.getId(),
                                responsible.getId(),
                                activity.getId(), null);
                activity.getOther().add(pFactory.newOther(DocumentProv.RDFS_NS, "comment",
                                DocumentProv.RDFS_PREFIX, commentText,
                                pFactory.getName().XSD_NAME));
                prov.document.getStatementOrBundle().add(actedOnBehalfOf);
                bundle.getStatement().add(activity);
                bundle.getStatement().add(wasGeneratedBy);
                return activity;
        }

        public Agent createDummyAgent(String localName, String label) {
                Agent agent = pFactory.newAgent(prov.qn(localName), label);
                return agent;
        }

        private Activity createActivity(String localName, String name, String dateCreated, Bundle bundle) {
                Activity activity = pFactory.newActivity(
                                prov.qn(localName, DocumentProv.DISK_PREFIX),
                                name);
                // add date created to the activity
                activity.getOther().add(pFactory.newOther(DocumentProv.RDFS_NS, "comment",
                                DocumentProv.RDFS_PREFIX, dateCreated,
                                pFactory.getName().XSD_NAME));
                loisBundle.getStatement().add(activity);
                return activity;
        }

        private void createWorkflowEntity(WorkflowBindings workflowBinding,
                        Activity activitySavedLineOfInquiry, Activity activityWriteDataQueryTemplate,
                        Constants.WORKFLOW_TYPE type, Entity workflowSystem, Entity workflow,
                        Entity variableBindingWorkflow) {
                String workflowLabel = workflowBinding.getDescription();
                String workflowLocalName = "unknown";
                String workflowSystemName = workflowBinding.getSource();
                workflowSystem = pFactory.newEntity(
                                prov.qn(workflowSystemName, DocumentProv.WINGS_ONTOLOGY_PREFIX),
                                workflowSystemName);
                workflow = pFactory.newEntity(prov.qn(workflowLocalName, DocumentProv.WINGS_ONTOLOGY_PREFIX),
                                workflowLabel);
                String variableBindingLocalName = Constants.WORKFLOW_VARIABLE_BINDING_LOCAL_NAME;
                String variableBindingLabel = "Workflow Variable Binding";
                if (type == Constants.WORKFLOW_TYPE.META_WORKFLOW) {
                        variableBindingLocalName = "metaWorkflowVariableBinding";
                        variableBindingLabel = "Meta Workflow Variable Binding";
                }
                variableBindingWorkflow = pFactory.newEntity(
                                prov.qn(variableBindingLocalName,
                                                DocumentProv.PROV_NEUROSCIENCE_LINE_PREFIX),
                                variableBindingLabel);
                handleWorkflowActivity(activityWriteDataQueryTemplate, activitySavedLineOfInquiry,
                                workflowSystem,
                                workflow,
                                variableBindingWorkflow,
                                Constants.ACTIVITY_SELECT_WORKFLOW_LABEL,
                                Constants.ACTIVITY_SELECT_WORKFLOW_VARIABLE_LABEL,
                                Constants.ACTIVITY_SELECT_WORKFLOW_VARIABLE_LOCALNAME,
                                Constants.ACTIVITY_SELECT_WORKFLOW_LOCALNAME,
                                workflowBinding);
        }

        public void level2LineAdd(TriggeredLOI triggerOfLineInquiry, LineOfInquiry lineOfInquiry,
                        Entity hypothesis, Entity questionEntity,
                        Entity lineOfInquiryEntity, Entity triggerEntity, Entity hypothesisVariablesCollection,
                        Bundle triggerBundle)
                        throws ParseException {

                String dateCreated = triggerOfLineInquiry.getDateCreated();
                String dataQuery = triggerOfLineInquiry.getDataQuery();
                String dataQueryDescription = triggerOfLineInquiry.getDataQueryExplanation();
                String dataSourceText = triggerOfLineInquiry.getDataSource();
                List<WorkflowBindings> metaworkflows = triggerOfLineInquiry.getMetaWorkflows();
                List<WorkflowBindings> workflows = triggerOfLineInquiry.getWorkflows();

                // create the activity for writing the data query

                Entity dataQueryTemplateEntity = pFactory.newEntity(
                                prov.qn("data_query", DocumentProv.PROV_NEUROSCIENCE_LINE_PREFIX),
                                dataQuery);
                loisBundle.getStatement().add(dataQueryTemplateEntity);
                Entity dataSource = createDataSource(dataSourceText);

                Activity activitySelectQuestion = createActivity("select_question", "Select the question", dateCreated,
                                loisBundle);
                Activity activitySelectDataSource = createActivity("select_data_source", "Select the data source",
                                dateCreated, loisBundle);
                Activity activityWriteDataQueryTemplate = createActivity("write_data_query_template",
                                "Write data query template", dateCreated, loisBundle);
                Activity activitySavedLineOfInquiry = createActivity("saved_line_of_inquiry", "Saved line of inquiry",
                                dateCreated, loisBundle);

                // Activity relations
                WasInformedBy wib = pFactory.newWasInformedBy(null, activitySelectDataSource.getId(),
                                activitySelectQuestion.getId(), null);
                WasInformedBy wib1 = pFactory.newWasInformedBy(null, activityWriteDataQueryTemplate.getId(),
                                activitySelectDataSource.getId(), null);

                // 1. Select the question
                Used usedSelectQuestion = pFactory.newUsed(null, activitySelectQuestion.getId(), questionEntity.getId(),
                                null,
                                null);
                // 2. Select the data source
                Used usedSelectDataSource = pFactory.newUsed(null, activitySelectDataSource.getId(), dataSource.getId(),
                                null,
                                null);
                // 3. Write data query template
                Used usedWriteDataQueryTemplate = pFactory.newUsed(null, activityWriteDataQueryTemplate.getId(),
                                questionEntity.getId(), null, null);
                WasGeneratedBy wgbWriteDataQueryTemplate = pFactory.newWasGeneratedBy(null,
                                dataQueryTemplateEntity.getId(), activityWriteDataQueryTemplate.getId(), null, null);
                // 8. Save the line of inquiry
                WasGeneratedBy wgbSavedLineOfInquiry = pFactory.newWasGeneratedBy(null, lineOfInquiryEntity.getId(),
                                activitySavedLineOfInquiry.getId(), null, null);

                Entity workflowSystem = null;
                Entity workflow = null;
                Entity variableBindingWorkflow = null;
                Entity metaWorkflow = null;
                Entity variableBindingMetaWorkflow = null;

                for (WorkflowBindings workflowBinding : metaworkflows) {
                        createWorkflowEntity(workflowBinding, activityWriteDataQueryTemplate,
                                        activitySavedLineOfInquiry, Constants.WORKFLOW_TYPE.META_WORKFLOW,
                                        workflowSystem, metaWorkflow, variableBindingMetaWorkflow);

                }

                for (WorkflowBindings workflowBinding : workflows) {
                        createWorkflowEntity(workflowBinding, activityWriteDataQueryTemplate,
                                        activitySavedLineOfInquiry, Constants.WORKFLOW_TYPE.WORKFLOW, workflowSystem,
                                        workflow, variableBindingWorkflow);
                }
                loisBundle.getStatement().add(usedSelectQuestion);
                prov.document.getStatementOrBundle().add(usedSelectDataSource);
                loisBundle.getStatement().add(usedWriteDataQueryTemplate);
                loisBundle.getStatement().add(wgbWriteDataQueryTemplate);
                loisBundle.getStatement().add(wgbSavedLineOfInquiry);

                level2AddTrigger(triggerOfLineInquiry, triggerEntity,
                                lineOfInquiryEntity, dataSource,
                                dataQueryTemplateEntity,
                                workflowSystem,
                                workflow, metaWorkflow, variableBindingWorkflow, variableBindingMetaWorkflow,
                                hypothesisVariablesCollection, triggerBundle);
        }

        private Entity createDataSource(String dataSourceText) {
                Entity dataSource = pFactory.newEntity(
                                prov.qn(Constants.DCAT_CATALOG_LOCALNAME, DocumentProv.PROV_NEUROSCIENCE_LINE_PREFIX),
                                dataSourceText);
                addTypeToEntity(dataSource, DocumentProv.DCAT_PREFIX, Constants.DCAT_CATALOG_LOCALNAME);
                loisBundle.getStatement().add(dataSource);
                return dataSource;
        }

        private void level2AddTrigger(TriggeredLOI triggeredLOI, Entity triggerEntity,
                        Entity lineOfInquiryEntity, Entity dataSourceLoi,
                        Entity dataQueryTemplate, Entity workflowSystem, Entity workflowLoi, Entity metaWorkflowLoi,
                        Entity variablesBindingWorkflowEntity, Entity variablesBindingMetaWorkflowEntity,
                        Entity hypothesisVariableCollection, Bundle triggerBundle) {

                // Create entities: dataQuery
                Entity dataQueryConcreteEntity = createDataQuery(triggeredLOI, triggerBundle);
                Entity dataSourceEntity = createDataSource(triggeredLOI, dataSourceLoi, triggerBundle);

                // Create activities: transformDataQuery, executeDataQuery
                Activity transformDataQuery = pFactory.newActivity(prov.qn("transformDataQueryTemplate"),
                                "Replace the variables in the data query template with the variables of the hypothesis");
                Used transformDataQueryActivityUsed = pFactory.newUsed(null, dataQueryTemplate.getId(),
                                transformDataQuery.getId(), null,
                                null);
                WasGeneratedBy dataQueryWasGeneratedBy = pFactory.newWasGeneratedBy(null,
                                dataQueryConcreteEntity.getId(),
                                transformDataQuery.getId(), null, null);
                Activity executeDataQuery = pFactory.newActivity(prov.qn("executeDataQuery"), "Execute the data query");
                WasGeneratedBy toiWasGeneratedBy = pFactory.newWasGeneratedBy(null, triggerEntity.getId(),
                                transformDataQuery.getId(), null, null);
                triggerBundle.getStatement().add(toiWasGeneratedBy);
                triggerBundle.getStatement().add(executeDataQuery);
                triggerBundle.getStatement().add(transformDataQuery);
                triggerBundle.getStatement().add(transformDataQueryActivityUsed);
                triggerBundle.getStatement().add(dataQueryWasGeneratedBy);

                if (variablesBindingMetaWorkflowEntity != null) {
                        addVariableBindingWorkflow(variablesBindingMetaWorkflowEntity,
                                        transformDataQuery, triggerBundle);
                }
                if (variablesBindingWorkflowEntity != null) {
                        addVariableBindingWorkflow(variablesBindingWorkflowEntity,
                                        transformDataQuery, triggerBundle);
                }

                Activity createRunActivity = pFactory.newActivity(
                                prov.qn("createRun", DocumentProv.PROV_NEUROSCIENCE_TRIGGER_PREFIX),
                                "Create run");

                List<WorkflowBindings> metaworkflows = triggeredLOI.getMetaWorkflows();
                List<WorkflowBindings> workflows = triggeredLOI.getWorkflows();

                for (WorkflowBindings metaWorkflow : metaworkflows) {
                        createWorkflowRun(triggerEntity, hypothesisVariableCollection, executeDataQuery,
                                        createRunActivity,
                                        metaWorkflow, triggerBundle);
                }
                for (WorkflowBindings workflow : workflows) {
                        createWorkflowRun(triggerEntity, hypothesisVariableCollection, executeDataQuery,
                                        createRunActivity,
                                        workflow, triggerBundle);
                }

                // Confidence report
                String confidenceReportLocalName = triggerEntity.getId().getLocalPart() + '_'
                                + Constants.DISK_ONTOLOGY_CONFIDENCE_REPORT_LOCALNAME;
                Entity confidenceReport = pFactory.newEntity(
                                prov.qn(confidenceReportLocalName, DocumentProv.PROV_NEUROSCIENCE_TRIGGER_PREFIX),
                                "Confidence Report");

                // Add other type
                addTypeToEntity(dataSourceEntity, DocumentProv.DISK_ONTOLOGY_PREFIX,
                                Constants.DISK_ONTOLOGY_CONFIDENCE_REPORT_LOCALNAME);
                String confidenceReportValue = null;
                if (confidenceReportValue == null) {
                        confidenceReportValue = "0.0";
                }
                confidenceReport.setValue(pFactory.newValue(confidenceReportValue));
                triggerBundle.getStatement().add(confidenceReport);
                triggerBundle.getStatement().add(createRunActivity);

        }

        private Entity createDataSource(TriggeredLOI triggeredLOI, Entity dataSourceLoi, Bundle triggerBundle) {
                String dataSource = triggeredLOI.getDataSource();
                Entity dataSourceEntity = pFactory.newEntity(
                                prov.qn("dataSource", DocumentProv.PROV_NEUROSCIENCE_TRIGGER_PREFIX), dataSource);
                triggerBundle.getStatement().add(dataSourceEntity);
                WasDerivedFrom dataSourceWasDerivedFrom = pFactory.newWasDerivedFrom(null, dataSourceEntity.getId(),
                                dataSourceLoi.getId());
                triggerBundle.getStatement().add(dataSourceWasDerivedFrom);
                return dataSourceEntity;
        }

        private Entity createDataQuery(TriggeredLOI triggeredLOI, Bundle triggerBundle) {
                String dataQueryConcreteText = triggeredLOI.getDataQuery();
                Entity dataQueryConcreteEntity = pFactory.newEntity(
                                prov.qn("data_query", DocumentProv.PROV_NEUROSCIENCE_TRIGGER_PREFIX),
                                dataQueryConcreteText);
                triggerBundle.getStatement().add(dataQueryConcreteEntity);
                return dataQueryConcreteEntity;
        }

        /**
         * Add the variable binding workflow to the activity
         *
         * @param entity
         * @param typePrefix    The namespace prefix of the type. For example: "disk"
         * @param typeLocalName The local name of the type. For example: "Workflow"
         */
        public void addTypeToEntity(Entity entity, String typePrefix, String typeLocalName) {
                QualifiedName typeQn = prov.qn(typeLocalName, typePrefix);
                Type type = pFactory.newType(typeQn, pFactory.getName().PROV_QUALIFIED_NAME);
                entity.getType().add(type);
        }

        private void createWorkflowRun(Entity triggerEntity, Entity hypothesisVariableCollection,
                        Activity executeDataQuery,
                        Activity createRunActivity, WorkflowBindings workflow, Bundle triggerBundle) {
                Entity runEntity = createEntityWorkflowRun(workflow, triggerBundle);
                Entity systemEntity = createEntityWorkflowSystem(workflow, triggerBundle);
                // Workflow runs are generated by the createRun activity
                WasGeneratedBy wasGeneratedBy = pFactory.newWasGeneratedBy(null,
                                runEntity.getId(), createRunActivity.getId(), null, null);
                triggerBundle.getStatement().add(wasGeneratedBy);
                List<VariableBinding> bindings = workflow.getBindings();
                // Filter the parameters of the workflow from variables
                Map<String, String> runFiles = workflow.getRun().getFiles();
                List<VariableBinding> newVariableBindings = addMissingTypeVariableBinding(bindings, runFiles);

                Entity workflowRunInputsCollection = createWorkflowVariableBindingCollection(triggerEntity,
                                executeDataQuery, createRunActivity, Constants.META_WORKFLOW_VARIABLES_BINDING,
                                "inputs", triggerBundle);
                Entity workflowRunParametersCollection = createWorkflowVariableBindingCollection(triggerEntity,
                                executeDataQuery, createRunActivity, Constants.META_WORKFLOW_VARIABLES_BINDING,
                                "parameters", triggerBundle);
                Entity workflowRunOutputsCollection = createWorkflowVariableBindingCollection(triggerEntity,
                                executeDataQuery, createRunActivity, Constants.META_WORKFLOW_VARIABLES_BINDING,
                                "outputs", triggerBundle);

                List<VariableBinding> runInputsBindings = newVariableBindings.stream()
                                .filter(vb -> vb.getType().equals("Input"))
                                .collect(Collectors.toList());
                List<VariableBinding> runParametersBindings = newVariableBindings.stream()
                                .filter(vb -> vb.getType().equals("Parameter"))
                                .collect(Collectors.toList());

                addWorkflowRunInputs(runInputsBindings, workflowRunInputsCollection, triggerBundle);
                addWorkflowRunParameters(runParametersBindings,
                                workflowRunParametersCollection, triggerBundle);
                addWorkflowRunOutputs(workflow.getRun().getOutputs(), workflowRunOutputsCollection,
                                triggerEntity.getId().getLocalPart(), triggerBundle);

                Activity analyzeWorkflowRun = pFactory.newActivity(prov.qn("analyzeWorkflowRun"),
                                "Analyze the Workflow Run");
                Used analyzeWorkflowRunUsedWorkflowRun = pFactory.newUsed(null,
                                runEntity.getId(),
                                analyzeWorkflowRun.getId(), null, null);
                Entity analysis = pFactory.newEntity(prov.qn("analysis"), "Analysis");
                WasGeneratedBy analysisWasGeneratedBy = pFactory.newWasGeneratedBy(null,
                                analysis.getId(),
                                analyzeWorkflowRun.getId(), null, null);
                triggerBundle.getStatement().add(analyzeWorkflowRun);
                triggerBundle.getStatement().add(analysis);
                triggerBundle.getStatement().add(analyzeWorkflowRunUsedWorkflowRun);
                triggerBundle.getStatement().add(analysisWasGeneratedBy);
        }

        public Entity createBaseEntity(String localName, String label, String prefix, Bundle bundle) {
                Entity entity = pFactory.newEntity(prov.qn(localName, prefix), label);
                bundle.getStatement().add(entity);
                return entity;
        }

        /**
         * Create `prov:Collection` to store the Parameters, Inputs and Outputs
         * nput*
         *
         * @param triggerEntity
         * @param generator
         * @param uses
         * @param collectionType
         * @param label
         * @return
         */
        private Entity createWorkflowVariableBindingCollection(Entity triggerEntity, Activity generator, Activity uses,
                        String collectionType, String label, Bundle triggerBundle) {
                String localName = triggerEntity.getId().getLocalPart() + '_' + collectionType;
                Entity entity = createBaseEntity(localName, label, DocumentProv.PROV_NEUROSCIENCE_TRIGGER_PREFIX,
                                triggerBundle);
                WasGeneratedBy wasGeneratedBy = pFactory.newWasGeneratedBy(null,
                                entity.getId(), generator.getId(), null,
                                null);
                triggerBundle.getStatement().add(wasGeneratedBy);
                // Activity `createRunOnWorkflow` uses the Parameters Collection
                Used used = pFactory.newUsed(null,
                                entity.getId(),
                                uses.getId(), null, null);
                triggerBundle.getStatement().add(used);
                return entity;
        }

        private void addWorkflowRunOutputs(Map<String, String> outputs,
                        Entity workflowRunParametersCollection, String prefix, Bundle triggerBundle) {
                outputs.entrySet().forEach(entry -> {
                        VariableBinding binding = new VariableBinding(entry.getKey(), entry.getValue());
                        Entity entity = addRunVariableBinding(workflowRunParametersCollection, binding,
                                        DocumentProv.PROV_NEUROSCIENCE_TRIGGER_PREFIX, triggerBundle);
                        addTypeToEntity(entity, DocumentProv.OPMW_PREFIX,
                                        Constants.OPMW_WORKFLOW_EXECUTION_ARTIFACT_LOCALNAME);
                });
        }

        private void addWorkflowRunParameters(List<VariableBinding> runParametersBindings,
                        Entity workflowRunParametersCollection, Bundle triggerBundle) {
                runParametersBindings.forEach(binding -> {
                        Entity entity = addRunVariableBinding(workflowRunParametersCollection, binding, triggerBundle);
                        addTypeToEntity(entity, DocumentProv.OPMW_PREFIX,
                                        Constants.OPMW_WORKFLOW_EXECUTION_PARAMETER_VARIABLE_LOCAL_NAME);
                });
        }

        /***
         * Add the inputs to the workflow run
         * The runInputs
         *
         * @param runInputsBindings
         * @param workflowRunInputsCollection
         */
        private void addWorkflowRunInputs(List<VariableBinding> runInputsBindings,
                        Entity workflowRunInputsCollection, Bundle triggerBundle) {
                // Create dcat:Dataset for each Variable Binding type Input
                addTypeToEntity(workflowRunInputsCollection, DocumentProv.DCAT_PREFIX,
                                Constants.DCAT_DATASET_LOCALNAME);
                addTypeToEntity(workflowRunInputsCollection, DocumentProv.OPMW_PREFIX,
                                Constants.OPMW_WORKFLOW_EXECUTION_DATA_VARIABLE_LOCAL_NAME);
                runInputsBindings.forEach(variableBinding -> {
                        Boolean isCollection = variableBinding.isCollection();
                        String[] bindings = isCollection ? splitArrayString(variableBinding.getBinding())
                                        : new String[] { variableBinding.getBinding() };
                        for (String binding : bindings) {
                                VariableBinding vb = new VariableBinding(variableBinding.getVariable(),
                                                binding);
                                Entity entity = addRunVariableBinding(workflowRunInputsCollection, vb, triggerBundle);
                                addTypeToEntity(entity, DocumentProv.DCAT_PREFIX,
                                                Constants.DCAT_RESOURCE_LOCALNAME);
                        }
                });
        }

        public static List<VariableBinding> addMissingTypeVariableBinding(List<VariableBinding> bindings,
                        Map<String, String> runFiles) {
                List<VariableBinding> runInputsBindings = new ArrayList<>();

                for (VariableBinding binding : bindings) {
                        // loop over the files
                        for (String file : runFiles.keySet()) {
                                String bindingValues = binding.getBinding();
                                if (binding.isCollection()) {
                                        String[] bindingValuesArray = bindingValues.replace("[", "").replace("]", "")
                                                        .replace(" ", "")
                                                        .split(",");

                                        if (Arrays.asList(bindingValuesArray).contains(file)) {
                                                String newBinding = binding.getBinding().replace(file,
                                                                runFiles.get(file));
                                                binding.setBinding(newBinding);
                                                binding.setType("Input");
                                        } else {
                                                binding.setType("Parameter");
                                        }
                                } else {
                                        if (binding.getBinding().contains(file)) {
                                                binding.setBinding(runFiles.get(file));
                                                binding.setType("Input");
                                        } else {
                                                binding.setType("Parameter");
                                        }
                                }
                        }
                        runInputsBindings.add(binding);
                }
                return runInputsBindings;
        }

        private Entity createEntityWorkflowSystem(WorkflowBindings metaWorkflow, Bundle triggerBundle) {
                String workflowSystemName = metaWorkflow.getSource();
                Entity workflowRunSystem = pFactory.newEntity(
                                prov.qn(workflowSystemName, DocumentProv.WINGS_ONTOLOGY_PREFIX),
                                workflowSystemName);
                triggerBundle.getStatement().add(workflowRunSystem);
                return workflowRunSystem;
        }

        private Entity createEntityWorkflowRun(WorkflowBindings metaWorkflow, Bundle triggerBundle) {
                String workflowLink = metaWorkflow.getWorkflowLink();
                String workflowName = metaWorkflow.getWorkflow();
                String workflowLocalName = metaWorkflow.getWorkflow() != null ? metaWorkflow.getWorkflow()
                                : "Unknown";
                Entity metaWorkflowRun = pFactory.newEntity(
                                prov.qn(workflowLocalName, DocumentProv.PROV_NEUROSCIENCE_TRIGGER_PREFIX),
                                workflowName);
                triggerBundle.getStatement().add(metaWorkflowRun);
                return metaWorkflowRun;
        }

        private void handleWorkflowActivity(Activity activityWriteDataQueryTemplate,
                        Activity activitySavedLineOfInquiry,
                        Entity workflowSystem, Entity workflow, Entity variableBindingWorkflow,
                        String activitySelectWorkflowLabel,
                        String activitySelectVariableWorkflowLabel, String activitySelectVariableLocalName,
                        String activitySelectWorkflowName, WorkflowBindings workflowBindingResource) {
                prov.document.getStatementOrBundle().add(workflowSystem);
                Activity activitySelectWorkflow = pFactory
                                .newActivity(prov.qn(activitySelectWorkflowName, DocumentProv.DISK_PREFIX),
                                                activitySelectWorkflowLabel);
                WasInformedBy wib2 = pFactory.newWasInformedBy(null, activitySelectWorkflow.getId(),
                                activityWriteDataQueryTemplate.getId(), null);
                Activity activitySelectVariableWorkflow = pFactory
                                .newActivity(prov.qn(activitySelectVariableLocalName, DocumentProv.DISK_PREFIX),
                                                activitySelectVariableWorkflowLabel);
                WasGeneratedBy wgbSelectVariableWorkflow = pFactory.newWasGeneratedBy(null,
                                variableBindingWorkflow.getId(),
                                activitySelectVariableWorkflow.getId(), null, null);
                Used usedSelectVariableWorkflow = pFactory.newUsed(null, activitySelectVariableWorkflow.getId(),
                                workflow.getId(), null,
                                null);
                WasInformedBy wib4 = pFactory.newWasInformedBy(null, activitySelectVariableWorkflow.getId(),
                                activitySelectWorkflow.getId(), null);
                WasInformedBy wib7 = pFactory.newWasInformedBy(null, activitySavedLineOfInquiry.getId(),
                                activitySelectVariableWorkflow.getId(), null);
                Used usedSelectWorkflow = pFactory.newUsed(null, activitySelectWorkflow.getId(), workflowSystem.getId(),
                                null,
                                null);
                WasGeneratedBy wgbSelectWorkflow = pFactory.newWasGeneratedBy(null, workflow.getId(),
                                activitySelectWorkflow.getId(), null, null);
                WasInformedBy wib6 = pFactory.newWasInformedBy(null, activitySavedLineOfInquiry.getId(),
                                activitySelectVariableWorkflow.getId(), null);
                Used usedSavedLineOfInquiry = pFactory.newUsed(null, activitySavedLineOfInquiry.getId(),
                                variableBindingWorkflow.getId(), null,
                                null);

                loisBundle.getStatement().add(variableBindingWorkflow);
                prov.document.getStatementOrBundle().add(workflow);
                HadMember hm = pFactory.newHadMember(workflow.getId(), workflowSystem.getId());
                prov.document.getStatementOrBundle().add(hm);
                loisBundle.getStatement().add(activitySelectWorkflow);
                loisBundle.getStatement().add(wib2);
                loisBundle.getStatement().add(wib7);
                loisBundle.getStatement().add(activitySelectVariableWorkflow);
                loisBundle.getStatement().add(activitySelectVariableWorkflow);
                loisBundle.getStatement().add(wib6);
                loisBundle.getStatement().add(wib4);
                prov.document.getStatementOrBundle().add(usedSelectWorkflow);
                prov.document.getStatementOrBundle().add(wgbSelectWorkflow);
                loisBundle.getStatement().add(wgbSelectVariableWorkflow);
                prov.document.getStatementOrBundle().add(usedSelectVariableWorkflow);
                loisBundle.getStatement().add(usedSavedLineOfInquiry);

                // Add the variable bindings
                workflowBindingResource.getBindings().forEach(b -> {
                        String value = b.getBinding();
                        String name = b.getVariable();

                        Entity variableBindingCollectionItem = pFactory.newEntity(
                                        prov.qn(name, DocumentProv.PROV_NEUROSCIENCE_LINE_PREFIX),
                                        name);
                        // TODO: set value
                        if (value == null) {
                                value = "";
                        }
                        variableBindingCollectionItem.setValue(pFactory.newValue(value));

                        loisBundle.getStatement().add(variableBindingCollectionItem);
                        HadMember hm2 = pFactory.newHadMember(variableBindingWorkflow.getId(),
                                        variableBindingCollectionItem.getId());
                        loisBundle.getStatement().add(hm2);
                });

        }

        private Entity level2QuestionAddVariables(Question question,
                        Entity questionEntity, HashMap<String, Entity> questionVariablesMap,
                        Activity createQuestionActivity) {

                String variableCollectionLocalName = questionEntity.getId().getLocalPart() + '_'
                                + Constants.QUESTION_VARIABLES_BINDING;
                Entity questionVariableCollection = pFactory.newEntity(
                                prov.qn(variableCollectionLocalName,
                                                DocumentProv.PROV_NEUROSCIENCE_QUESTION_PREFIX),
                                "Collection of question variables");
                List<QuestionVariable> variables = question.getVariables();
                variables.forEach(variable -> {
                        String id = variable.getId();
                        String name = variable.getVariableName();
                        try {

                                String localName = Utils.getFragment(id);
                                Entity questionVariableEntity = pFactory.newEntity(
                                                prov.qn(localName, DocumentProv.PROV_NEUROSCIENCE_QUESTION_PREFIX),
                                                name);
                                addTypeToEntity(questionVariableEntity, DocumentProv.QUESTION_ONTOLOGY_PREFIX,
                                                Constants.SQO_QUESTION_VARIABLE_LOCALNAME);
                                HadMember hadMember = pFactory.newHadMember(questionVariableCollection.getId(),
                                                questionVariableEntity.getId());
                                questionBundle.getStatement().addAll(Arrays.asList(hadMember));
                                questionBundle.getStatement().add(questionVariableEntity);
                        } catch (Exception e) {
                                e.printStackTrace();
                        }

                });
                WasDerivedFrom wdf = pFactory.newWasDerivedFrom(null, questionEntity.getId(),
                                questionVariableCollection.getId());
                WasGeneratedBy wgb = pFactory.newWasGeneratedBy(null, questionVariableCollection.getId(),
                                createQuestionActivity.getId());
                questionBundle.getStatement().addAll(Arrays.asList(wdf));
                questionBundle.getStatement().add(questionVariableCollection);
                questionBundle.getStatement().add(wgb);
                return questionVariableCollection;
        }

        /**
         * Add the variables to the hypothesis
         *
         * @param hypothesis
         * @param hypothesisEntity
         * @param questionVariableCollection
         * @param createHypothesisActivity
         * @param question
         * @return
         */
        private Entity level2HypothesisAddVariables(Hypothesis hypothesis,
                        Entity hypothesisEntity, Entity questionVariableCollection,
                        Activity createHypothesisActivity, Question question) {
                // Create the collection of variables, and the derivation (Question ->
                // Hypothesis) and add to the bundle
                String variableCollectionLocalName = hypothesisEntity.getId().getLocalPart() + '_'
                                + Constants.HYPOTHESIS_VARIABLES_BINDING;
                QualifiedName qn = prov.qn(variableCollectionLocalName,
                                DocumentProv.PROV_NEUROSCIENCE_HYPOTHESIS_PREFIX);
                Entity variableCollection = pFactory.newEntity(
                                qn,
                                "Collection of question variables");
                WasDerivedFrom derivationVariables = pFactory.newWasDerivedFrom(null,
                                variableCollection.getId(), questionVariableCollection.getId());
                hypothesisBundle.getStatement().add(variableCollection);
                hypothesisBundle.getStatement().add(derivationVariables);
                // Create the variables and add to the bundle
                hypothesis.getQuestionBindings().forEach(variableBinding -> {
                        try {
                                // Create Hypothesis variable entity
                                Entity variableBindingEntity = createVariableBindingEntity(variableBinding,
                                                DocumentProv.PROV_NEUROSCIENCE_HYPOTHESIS_PREFIX,
                                                variableCollectionLocalName);
                                // Link the variable to the collection
                                HadMember hadMember = pFactory.newHadMember(variableCollection.getId(),
                                                variableBindingEntity.getId());
                                hypothesisBundle.getStatement().add(hadMember);
                                // Create the derivation (QuestionVariable -> HypothesisVariable)
                                QualifiedName questionVariableQn = prov.qn(
                                                Utils.getFragment(variableBinding.getVariable()),
                                                DocumentProv.PROV_NEUROSCIENCE_QUESTION_PREFIX);
                                WasDerivedFrom derivationVariable = pFactory.newWasDerivedFrom(null,
                                                variableBindingEntity.getId(), questionVariableQn);
                                hypothesisBundle.getStatement().add(derivationVariable);
                        } catch (Exception e) {
                                e.printStackTrace();
                        }
                });
                // Create the derivation (Hypothesis -> VariableCollection)
                WasDerivedFrom wdf = pFactory.newWasDerivedFrom(null, hypothesisEntity.getId(),
                                variableCollection.getId());
                // Create the generation (VariableCollection -> Hypothesis)
                WasGeneratedBy wgb = pFactory.newWasGeneratedBy(null, variableCollection.getId(),
                                createHypothesisActivity.getId());
                hypothesisBundle.getStatement().add(wgb);
                hypothesisBundle.getStatement().add(wdf);
                // TODO: Maybe this is not needed
                hypothesisBundle.getStatement().add(createHypothesisActivity);
                return variableCollection;
        }

        /**
         * Create a Entity for VariableBinding
         *
         * @param variableBinding
         * @param prefix
         * @param parentCollectionLocalName
         * @return
         * @throws URISyntaxException
         */

        private Entity createVariableBindingEntity(VariableBinding variableBinding, String prefix,
                        String parentCollectionLocalName) throws URISyntaxException {
                String variable = variableBinding.getVariable();
                String localName = Utils.getFragment(variable);
                String binding = variableBinding.getBinding();
                String variableLocalName = parentCollectionLocalName + '_' + localName;
                QualifiedName qn = prov.qn(variableLocalName, prefix);
                Entity variableBindingEntity = pFactory.newEntity(qn, binding);
                hypothesisBundle.getStatement().add(variableBindingEntity);
                return variableBindingEntity;
        }

        /**
         * A factory method to create an instance of a derivation {@link WasDerivedFrom}
         *
         * @param generated the identifier of the <a href=
         *                  "http://www.w3.org/TR/prov-dm/#derivation.generatedEntity">entity
         *                  generated</a> by the derivation
         * @param used      the identifier of the <a href=
         *                  "http://www.w3.org/TR/prov-dm/#derivation.usedEntity">entity
         *                  used</a> by the derivation
         * @param bundle    the bundle to add the derivation to
         */
        private void localWasDerived(Entity generated, Entity used, Bundle bundle) {
                WasDerivedFrom triggerFromLine = pFactory.newWasDerivedFrom(used.getId(),
                                generated.getId());
                bundle.getStatement().add(triggerFromLine);
        }

        /**
         * Create a question entity
         *
         * @param question the question to create the entity for
         * @return the question entity
         * @throws URISyntaxException
         */
        public Entity createQuestionEntity(Question question) throws URISyntaxException {
                String id = question.getId();
                String name = question.getName();
                String localName = Utils.getFragment(id);
                Entity questionEntity = pFactory.newEntity(
                                prov.qn(localName, Constants.SQO_RESOURCE_PREFIX),
                                name);
                String commentLocalName = "comment";
                String commentValue = "Question class represents a scientific question. Is linked to the template, the pattern and all the variables this question uses.";
                questionEntity.getOther().add(pFactory.newOther(DocumentProv.RDFS_NS, commentLocalName,
                                DocumentProv.RDFS_PREFIX, commentValue,
                                pFactory.getName().XSD_NAME));
                questionBundle.getStatement().add(questionEntity);
                return questionEntity;
        }

        public Entity createHypothesisEntity(Hypothesis hypothesis) throws URISyntaxException {
                /**
                 * Create the hypothesis entity
                 */
                String id = hypothesis.getId();
                String name = hypothesis.getName();
                String localName = Utils.getFragment(id);
                String dateCreated = hypothesis.getDateCreated();

                Entity hypothesisEntity = pFactory.newEntity(
                                prov.qn(localName, DocumentProv.PROV_NEUROSCIENCE_HYPOTHESIS_PREFIX),
                                name);
                hypothesisEntity.getOther().add(pFactory.newOther(DocumentProv.DCTERMS_NS, "created",
                                DocumentProv.DCTERMS_PREFIX, dateCreated,
                                pFactory.getName().XSD_NAME));
                hypothesisBundle.getStatement().add(hypothesisEntity);
                return hypothesisEntity;
        }

        public Entity createLineOfInquiryEntity(LineOfInquiry lineOfInquiry) throws URISyntaxException {
                /**
                 * Create the line of inquiry entity
                 */

                String id = lineOfInquiry.getId();
                String name = lineOfInquiry.getName();
                String localName = Utils.getFragment(id);
                String dateCreated = lineOfInquiry.getDateCreated();
                Entity loisEntity = pFactory.newEntity(
                                prov.qn(localName, DocumentProv.PROV_NEUROSCIENCE_LINE_PREFIX),
                                name);
                if (dateCreated != null)
                        loisEntity.getOther().add(pFactory.newOther(DocumentProv.DCTERMS_NS, "created",
                                        DocumentProv.DCTERMS_PREFIX, dateCreated,
                                        pFactory.getName().XSD_NAME));
                loisBundle.getStatement().add(loisEntity);
                return loisEntity;
        }

        public Entity createTiggerEntity(TriggeredLOI triggerLineInquiry, Bundle triggerBundle)
                        throws URISyntaxException {
                String id = triggerLineInquiry.getId();
                String name = triggerLineInquiry.getName();
                String localName = Utils.getFragment(id);
                String dateCreated = triggerLineInquiry.getDateCreated();
                Entity triggerEntity = pFactory.newEntity(
                                prov.qn(localName, DocumentProv.PROV_NEUROSCIENCE_TRIGGER_PREFIX),
                                name);
                // Add the date created
                triggerEntity.getOther().add(pFactory.newOther(DocumentProv.DCTERMS_NS, "created",
                                DocumentProv.DCTERMS_PREFIX, dateCreated,
                                pFactory.getName().XSD_NAME));
                // Add rdf:type
                addTypeToEntity(triggerEntity, DocumentProv.DISK_ONTOLOGY_PREFIX,
                                Constants.DISK_ONTOLOGY_TRIGGER_LINE_OF_INQUIRY_LOCALNAME);
                // Add the generatedAtTime
                Other dateAtributes = pFactory.newOther(DocumentProv.PROV_NS, "generatedAtTime",
                                DocumentProv.RDFS_PREFIX, dateCreated,
                                pFactory.getName().XSD_DATETIME);
                triggerEntity.getOther().add(dateAtributes);
                // Add to the bundle
                triggerBundle.getStatement().add(triggerEntity);
                return triggerEntity;
        }

        private Question findQuestion(String questionId, List<Question> questions) {
                return questions.stream().filter(q -> q.getId().equals(questionId)).findFirst()
                                .orElse(null);
        }

        public static String[] splitArrayString(String arrayString) {
                String newString = arrayString.replace("[", "").replace("]", "")
                                .replace(" ", "");
                String[] array = newString.split(",");
                for (int i = 0; i < array.length; i++) {
                        array[i] = array[i].trim();
                }
                return array;
        }
}
